import ast
import calendar
import requests
import time as t
import asyncio

from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler



CITY = {
    '–ú–∏–Ω—Å–∫' : 'c625144',
    '–î—è—Ç–ª–æ–≤–æ' : 'c628658'
}
TG_BOT_TOKEN = '8418015159:AAFkDdde3QsWinhSg6Sa866C5onf_wAYSxU' # @botfather
TG_MY_URL = '762753264' # @userinfobot

scheduler = AsyncIOScheduler(timezon='Europe/Minsk')
bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()



def initialized():
    global year, month, day, time, start_place, finish_place, passengers

    day = datetime.now().date()
    next_day = day + timedelta(days=1)

    month = datetime.now().month
    if month == 12:
        next_month = 1
    else:
        next_month = month + 1

    year = datetime.now().year

    base_settings = [str(year), [str(month).zfill(2), str(next_month).zfill(2)], [str(day.day).zfill(2), str(next_day.day).zfill(2)], ['19:50:00', '20:50:00'], '–ú–∏–Ω—Å–∫', '–î—è—Ç–ª–æ–≤–æ', '1']

    year = base_settings[0]
    month = base_settings[1]
    day = base_settings[2]
    time = base_settings[3]
    start_place = base_settings[4]
    finish_place = base_settings[5]
    passengers = base_settings[6]



@dp.message(Command('set_settings'))
async def set_settings(command: CommandObject):
    global year, month, day, time, start_place, finish_place, passengers

    try:
        personal_settings = ast.literal_eval(command.args) 

        year = personal_settings[0]
        month = personal_settings[1]
        day = personal_settings[2]
        time = personal_settings[3]
        start_place = personal_settings[4]
        finish_place = personal_settings[5]
        passengers = personal_settings[6]
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}` \nüîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞\\!*', parse_mode='MarkdownV2') 
    else:
        await bot.send_message(TG_MY_URL, '‚úÖ *–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\\!*', parse_mode='MarkdownV2') 



@dp.message(Command('get_settings'))
async def get_settings(text: Message):
    try:
        text = f'\
‚öôÔ∏è _*–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*_ \n\n\
üìÜ *–ì–æ–¥:* `{year}` \n\
üåú *–ú–µ—Å—è—Ü:* `{month}` \n\
‚òÄÔ∏è *–î–µ–Ω—å:* `{day}` \n\
‚è∞ *–í—Ä–µ–º—è:* `{time}` \n\
‚úàÔ∏è *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* `{start_place}` \n\
üè† *–ü—Ä–∏–±—ã—Ç–∏–µ:* `{finish_place}` \n\
üôÇ *–ü–∞—Å—Å–∞–∂–∏—Ä—ã:* `{passengers}` \n'
        
        await bot.send_message(TG_MY_URL, text, parse_mode='MarkdownV2')
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



@dp.message(Command('search'))
async def search(text: Message):
    try:
        if not scheduler.running:
            scheduler.add_job(search_main, 'interval', minutes = 1)
            scheduler.start()
            await bot.send_message(TG_MY_URL, '‚úÖ *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω\\!* \nüìå *–°–∞–π—Ç –±—É–¥–µ—Ç –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ* `5\\-—Ç—å –º–∏–Ω—É—Ç`*\\!*', parse_mode='MarkdownV2')
        else:
            await bot.send_message(TG_MY_URL, '‚ö†Ô∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω\\!*', parse_mode='MarkdownV2')
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



async def search_main():
    try:
        await bot.send_message(TG_MY_URL, '‚è≥ –ó–∞–ø—Ä–æ—Å\\.\\.\\.', parse_mode='MarkdownV2')

        find = False
        text = f'üîç _*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*_ \n\n'
        for m in month:
            for d in day:
                t.sleep(3)
                date = str(year) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2)
                request = 'https://atlasbus.by/api/search?from_id=' + CITY[start_place] + '&to_id=' + CITY[finish_place] + '&calendar_width=' + str(calendar.monthrange(int(year), int(m))[1]) + '&date=' + date + '&passengers=' + passengers
                answer = requests.get(request, verify=False).json()

                for a in answer['rides']:
                    if (a['freeSeats'] - int(passengers) >= 0 and a['departure'][11:] in time):
                        find = True
                        text += f'\
‚è∞ *–í—Ä–µ–º—è:* `{a['departure'][11:]} - {a['arrival'][11:]}` \n\
üìÜ *–î–∞—Ç–∞:* `{date}` \n\
‚úàÔ∏è *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* ` {start_place} ({' ‚Üí '.join(j['desc'] for j in a['pickupStops'])})` \n\
üè† *–ü—Ä–∏–±—ã—Ç–∏–µ:* `{finish_place} ({' ‚Üí '.join(j['desc'] for j in a['dischargeStops'])})` \n\
üí∞ *–¶–µ–Ω–∞:* `{a['price']} {a['currency']}` \n\
üöç *–ê–≤—Ç–æ–±—É—Å:* `{a['bus']['mark']} / {a['bus']['model']} / {a['bus']['color']['name']}` \n\
üìè *–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:* `{a['distance']} km` \n\
‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* `{a['carrier_phones']}` \n\
üë©‚Äçüë¶ *–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫:* `{a['legal']['name']}` \n\
ü™ë *–ú–µ—Å—Ç:* `{a['freeSeats']}` \n'

        if find:
            await bot.send_message(TG_MY_URL, text, parse_mode='MarkdownV2') 
            scheduler.remove_all_jobs()
            scheduler.shutdown(wait=False)
            await bot.send_message(TG_MY_URL, '‚õîÔ∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*', parse_mode='MarkdownV2') 
        else:
            await bot.send_message(TG_MY_URL, f'{text}üôÖüèª *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç\\!*', parse_mode='MarkdownV2') 
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



@dp.message(Command('info'))
async def info(text: Message):
    try:
        curr_year = datetime.now().year
        curr_month = datetime.now().month
        curr_day = datetime.now().day

        curr_date = str(curr_year) + '-' + str(curr_month).zfill(2) + '-' + str(curr_day).zfill(2)
        curr_request = 'https://atlasbus.by/api/search?from_id=' + CITY[start_place] + '&to_id=' + CITY[finish_place] + '&calendar_width=' + str(calendar.monthrange(int(curr_year), int(curr_month))[1]) + '&date=' + curr_date + '&passengers=' + passengers
        curr_answer = requests.get(curr_request, verify=False).json()

        await bot.send_message(TG_MY_URL, '‚òùÔ∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ\\! \n‚è≥ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ* `30 —Å–µ–∫—É–Ω–¥`\\ \nüôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ\\!*', parse_mode='MarkdownV2')

        text = f'üìä _*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*_ \n\n'
        for a_c in curr_answer['calendar']:
            if a_c['rideCount'] != 0:
                text += f'\
üìÜ *–î–∞—Ç–∞:* `{a_c['date']}` \n\
üöç *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫:* `{a_c['rideCount']}` \n'

                new_year = a_c['date'][:4]
                new_month = a_c['date'][5:7]
                new_day = a_c['date'][8:10]

                t.sleep(3)
                new_date = str(new_year) + '-' + str(new_month).zfill(2) + '-' + str(new_day).zfill(2)
                new_request = 'https://atlasbus.by/api/search?from_id=' + CITY[start_place] + '&to_id=' + CITY[finish_place] + '&calendar_width=' + str(calendar.monthrange(int(new_year), int(new_month))[1]) + '&date=' + new_date + '&passengers=' + passengers
                new_answer = requests.get(new_request, verify=False).json()

                for a_r in new_answer['rides']:
                    text += f'‚Ä¢ `{a_r['departure'][11:]} \\- {a_r['freeSeats']}` \n'
                text += f'\n'

        await bot.send_message(TG_MY_URL, text, parse_mode='MarkdownV2') 
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



@dp.message(Command('start'))
async def start(text: Message):
    try:
        text = f"\n\
üìü _*–ö–æ–º–∞–Ω–¥—ã:*_ \n\n\
**/start** *\\- —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥* ‚ÑπÔ∏è \n\n\
**/search** *\\- –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥* üöÄ \n\n\
`/set\\_settings` *\\- –∑–∞–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞* ‚öôÔ∏è \n\n\
‚Ä¢ *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:* \n`/set\\_settings [{year}, {month}, {day}, ['19:50:00', '20:50:00'], '–ú–∏–Ω—Å–∫', '–î—è—Ç–ª–æ–≤–æ', '1']` \n\n\
‚Ä¢ *–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞:* \n`/set\\_settings ['–ì–æ–¥', ['–ú–µ—Å—è—Ü_1', '–ú–µ—Å—è—Ü_2', ...], ['–î–µ–Ω—å_1', '–î–µ–Ω—å_2', ...], ['–í—Ä–µ–º—è_1', '–í—Ä–µ–º—è_2', ...], '–ú–µ—Å—Ç–æ_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–ú–µ—Å—Ç–æ_–ü—Ä–∏–±—ã—Ç–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤']` \n\n\
**/get\\_settings** *\\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞* üîç \n\n\
**/info** *\\- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ–π—Å—ã* üìã \n\n\
**/stop** *\\- –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥* ‚õîÔ∏è \n\n"
    
        await bot.send_message(TG_MY_URL, text, parse_mode='MarkdownV2') 
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



@dp.message(Command('stop'))
async def stop(message: Message):
    try:
        if scheduler.running:
            scheduler.remove_all_jobs()
            scheduler.shutdown(wait=False)
            await bot.send_message(TG_MY_URL, '‚õîÔ∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\\!*', parse_mode='MarkdownV2') 
        else:
            await bot.send_message(TG_MY_URL, '‚ö†Ô∏è *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω\\!*', parse_mode='MarkdownV2')
    except Exception as e:
        await bot.send_message(TG_MY_URL, f'‚ùå *–û—à–∏–±–∫–∞:* `{str(e)}`', parse_mode='MarkdownV2')



async def main():
    await dp.start_polling(bot)
    


if __name__ == "__main__":
    initialized()
    asyncio.run(main())